<Window x:Class="LuminoStudio.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LuminoStudio.Views"
        xmlns:vm="clr-namespace:LuminoStudio.ViewModels"
        xmlns:props="clr-namespace:LuminoStudio.Properties"
        Title="MainWindow" Height="600" Width="800"
        Loaded="Window_Loaded"
        Closed="Window_Closed">
    
    <Window.Resources>
        <props:Resources x:Key="res" />
    </Window.Resources>
    
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    
    <i:Interaction.Triggers>

        <l:InteractionMessageTrigger MessageKey="ProjectCreationWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:ProjectCreationWindow}" Mode="Modal"/>
        </l:InteractionMessageTrigger>
        
        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>
    
    <Grid Background="Aqua">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Menu -->
        <Menu>
            <MenuItem Header="{Binding Menu_File, Source={StaticResource res}}">
                <MenuItem
                    Header="{Binding Menu_New, Source={StaticResource res}}"
                    Command="{Binding NewProjectCommand}"/>
            </MenuItem>
        </Menu>
        
        <Grid Grid.Row="1">
            <StackPanel>
                <TextBlock>Appears chracter after 1 second.</TextBlock>
                 <!--ReactiveProperty binding ".Value"--> 
                <TextBox Text="{Binding InputText.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <TextBlock Text="{Binding DisplayText.Value}" />
                <Button Command="{Binding ReplaceTextCommand}">Is TextBox empty or not?</Button>
            </StackPanel>
            <!--<Button Command="{Binding NavigateBasics}">ReactiveProperty Basics</Button>-->
            <!--<Button Content="test"  Command="{Binding NewProjectCommand}"/>
            <v:LuminoFrameWindowHost x:Name="Host" Width="200" Height="100" />-->
        </Grid>
    </Grid>
</Window>
